<html lang='en'>
<head>
    <meta content='text/html; charset=utf-8' http-equiv='Content-Type'>
    <meta property='og:title' content='MetricsGraphics.js' />
    <meta property='og:description' content='MetricsGraphics.js is a library optimized
        for visualizing and laying out time-series data. It provides a simple way to produce
        common types of graphics in a principled, consistent and responsive way.' />
    <meta property='og:image' content='http://metricsgraphicsjs.org/images/og-logo.png' />
    <meta property='og:type' content='website' />
    <meta property='og:url' content='http://metricsgraphicsjs.org/' />
    <meta property='og:site_name' content='MetricsGraphics.js' />

    <link rel='icon' type='image/png' href='images/og-logo.png' />
    <title>MetricsGraphics.js (DEV)</title>

    <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,700' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=PT+Serif:400,700,400italic' rel='stylesheet' type='text/css'>
    <link href='https://netdna.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.css' rel='stylesheet' type='text/css'>
    <link href='https://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css' rel='stylesheet' type='text/css'>

    <link href='../dist/metricsgraphics.css' rel='stylesheet' type='text/css'>
    <link href='css/metricsgraphics-demo.css' rel='stylesheet' type='text/css' id='light'>
    <link href='' rel='stylesheet' type='text/css' id='dark'>
    <link href='css/highlightjs-default.css' rel='stylesheet' type='text/css' id='light-code'>
    <link href='' rel='stylesheet' type='text/css' id='dark-code'>

    <script src='js/lib/highlight.pack.js'></script>
    <script src='https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js'></script>
    <script src='https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.0/d3.min.js' charset='utf-8'></script>


    <!-- dev start -->
    <script src='../src/js/MG.js'></script>
    <script src='../src/js/common/data_graphic.js'></script>
    <script src='../src/js/common/bootstrap_tooltip_popover.js'></script>
    <script src='../src/js/common/chart_title.js'></script>
    <script src='../src/js/common/y_axis.js'></script>
    <script src='../src/js/common/x_axis.js'></script>
    <script src='../src/js/common/init.js'></script>
    <script src='../src/js/common/markers.js'></script>
    <script src='../src/js/common/window_listeners.js'></script>
    <script src='../src/js/layout/bootstrap_dropdown.js'></script>
    <script src='../src/js/layout/button.js'></script>
    <script src='../src/js/charts/line.js'></script>
    <script src='../src/js/charts/histogram.js'></script>
    <script src='../src/js/charts/point.js'></script>
    <script src='../src/js/charts/bar.js'></script>
    <script src='../src/js/charts/table.js'></script>
    <script src='../src/js/charts/missing.js'></script>
    <script src='../src/js/misc/process.js'></script>
    <script src='../src/js/misc/smoothers.js'></script>
    <script src='../src/js/misc/formatters.js'></script>
    <script src='../src/js/misc/utility.js'></script>
    <script src='../src/js/misc/error.js'></script>

    <!-- dev end -->

    <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-51487512-1', 'metricsgraphicsjs.org');
    ga('send', 'pageview');
    </script>
</head>

<body>
    <div class='container'>
        <div class='head'>
            <ul>
                <li><a href='http://metricsgraphicsjs.org/'>Home</a></li>
                <li><a href='https://github.com/mozilla/metrics-graphics/releases'>Download</a></li>
                <li><a href='interactive-demo.htm'>Interactive</a></li>
                <li><a href='https://github.com/mozilla/metrics-graphics'>Code</a></li>
                <li><a href='https://github.com/mozilla/metrics-graphics/issues'>Issues</a></li>
                <li class='divider'>|</li>
                <li><a href='#' id='light-css' class='pill active'>Light style</a></li>
                <li><a href='#' id='dark-css' class='pill'>Dark style</a></li>
            </ul>

            <img src='images/logo.svg' id='logo' class='svg' />
        </div>

        <ul class='examples text-center'>
            <li><a href='#lines-section' id='lines' class='pill active'>Lines</a></li>
            <li><a href='#multilines-section' id='multilines' class='pill'>Multiple Lines</a></li>
            <li><a href='#data-section' id='data' class='pill'>Data</a></li>
            <li><a href='#axes-section' id='axes' class='pill'>Axes</a></li>
            <li><a href='#rollovers-section' id='rollovers' class='pill'>Rollovers</a></li>
            <li><a href='#auto-time-formatting-section' id='auto-time-formatting' class='pill'>Automatic time formatting</a></li>
            <li><a href='#annotations-section' id='annotations' class='pill'>Annotations</a></li>
            <li><a href='#updating-section' id='updating' class='pill'>Updating</a></li>
            <li><a href='#other-section' id='other' class='pill'>Other</a></li>
            <li><a href='#experimental-section' id='experimental' class='pill'>Experimental</a></li>
        </ul>

        <div id='trunk'>
            <a name='lines-section'></a>
            <div class='row trunk-section'>
                <div class='col-lg-7 text-center' id='fake_users1'></div>
                <div class='col-lg-5'>
                    <div class='data-column'><a href='data/fake_users1.json'>data</a></div>

<pre><code class='javascript'>d3.json('data/fake_users1.json', function(data) {
    data = MG.convert.date(data, 'date');
    MG.data_graphic({
        title: "Line Chart",
        description: "This is a simple line chart. You can remove the area portion by adding <i>area: false</i> to the arguments list.",
        data: data,
        width: 600,
        height: 200,
        right: 40,
        target: document.getElementById('fake_users1'),
        x_accessor: 'date',
        y_accessor: 'value'
    });
}</code></pre>

                </div>
            </div>

            <div class='row trunk-section'>
                <div class='col-lg-7 text-center' id='confidence_band'></div>
                <div class='col-lg-5'>
                    <div class='data-column'><a href='data/confidence_band.json'>data</a></div>

<pre><code class='javascript'>d3.json('data/confidence_band.json', function(data) {
    data = MG.convert.date(data, 'date');
    MG.data_graphic({
        title: "Confidence Band",
        description: "This is an example of a graphic with a confidence band and extended x-axis ticks enabled.",
        data: data,
        format: 'percentage',
        width: 600,
        height: 200,
        right: 40,
        target: '#confidence_band',
        show_secondary_x_label: false,
        show_confidence_band: ['l', 'u'],
        x_extended_ticks: true
    });
});</code></pre>

                </div>
            </div>

            <div class='row trunk-section'>
                <div class='col-lg-7 text-center' id='missing_is_hidden'></div>
                <div class='col-lg-5'>
                    <div class='data-column'><a href='data/missing-is-hidden.json'>data</a></div>

<pre><code class='javascript'>d3.json('data/missing-is-hidden.json', function(data) {
    data = MG.convert.date(data, 'date');
    MG.data_graphic({
        title: 'Broken Lines',
        description: 'Setting <i>missing_is_hidden</i> to true will hide missing ranges rather than considering them to be zeros or interpolating between the two points on either side.',
        data: data,
        missing_is_hidden: true,
        width: 600,
        height: 200,
        right: 40,
        target: '#missing_is_hidden',
        area: false,
        show_secondary_x_label: false
    });
});</code></pre>

                </div>
            </div>

            <div class='row trunk-section'>
                <div class='col-lg-7 text-center' id='small-range'></div>
                <div class='col-lg-5'>
                    <div class='data-column'><a href='data/small-range.json'>data</a></div>

<pre><code class='javascript'>d3.json('data/small-range.json', function(data) {
    data = MG.convert.date(data, 'date');
    MG.data_graphic({
        title: "Small Range of Integers",
        description: "When we have a data object of integers and a small range of values, the auto-generated set of y-axis ticks are filtered so that we don't include fractional values.",
        data: data,
        interpolate: 'basic',
        width: 600,
        height: 200,
        right: 40,
        target: '#small-range'
    });
});</code></pre>

                </div>
            </div>

            <div class='row trunk-section'>
                <div class='col-lg-7 text-center'>
                    <div id='briefing-1'></div>
                    <div id='briefing-2'></div>
                </div>
                <div class='col-lg-5'>
                    <div class='data-column'>
                        <a href='data/brief-1.json'>data 1</a>, 
                        <a href='data/brief-2.json'>data 2</a>
                    </div>

<pre><code class='javascript'>d3.json('data/brief-1.json', function(data) {
    data = MG.convert.date(data, 'date');
    MG.data_graphic({
        title: "Linked Graphic",
        description: "The two graphics in this section are linked together. A rollover in one causes a rollover in the other.",
        data: data,
        width: trunk.width,
        linked: true,
        width: 600,
        height: 200,
        right: 40,
        xax_count: 4,
        target: '#briefing-1'
    });
});

d3.json('data/brief-2.json', function(data) {
    data = MG.convert.date(data, 'date');
    MG.data_graphic({
        title: "Other Linked Graphic",
        description: "Roll over and watch as the graphic to the left triggers.",
        data: data,
        area: false,
        linked: true,
        width: 600,
        height: 200,
        right: 40,
        xax_count: 4,
        target: '#briefing-2'
    });
});</code></pre>

                </div>
            </div>

            <a name='multilines-section'></a>
            <div class='row trunk-section'>
                <div class='col-lg-7 text-center' id='fake_users2'></div>
                <div class='col-lg-5'>
                    <div class='data-column'><a href='data/fake_users2.json'>data</a></div>

<pre><code class='javascript'>d3.json('data/fake_users2.json', function(data) {
    for (var i = 0; i < data.length; i++) {
        data[i] = MG.convert.date(data[i], 'date');
    }

    MG.data_graphic({
        title:"Multi-Line Chart",
        description: "This line chart contains multiple lines.",
        data: data,
        width: 600,
        height: 200,
        right: 40,
        target: '#fake_users2',
        legend: ['Line 1','Line 2','Line 3'],
        legend_target: '.legend'
    });
});</code></pre>

                </div>
            </div>
            <div class='row'>
                <div class='col-lg-7 text-center legend'></div>
                <div class='col-lg-5'></div>
            </div>
            
            <div class='row trunk-section'>
                <div class='col-lg-7 text-center' id='missing_is_hidden_multi'></div>
                <div class='col-lg-5'>
                    <div class='data-column'><a href='data/missing-is-hidden-multi.json'>data</a></div>

<pre><code class='javascript'>d3.json('data/missing-is-hidden-multi.json', function(data) {
    for (var i = 0; i < data.length; i++) {
        data[i] = MG.convert.date(data[i], 'date');
    }

    MG.data_graphic({
        title: 'Broken Multi-Lines',
        description: 'Setting <i>missing_is_hidden</i> works with multiple lines too.',
        data: data,
        width: 600,
        height: 200,
        right: 40,
        missing_is_hidden: true,
        target: '#missing_is_hidden_multi',
        show_secondary_x_label: false
    });
});</code></pre>

                </div>
            </div>

            <div class='row trunk-section'>
                <div class='col-lg-7 text-center'>
                    <div id='linked_multi1'></div>
                    <div id='linked_multi2'></div>
                </div>
                <div class='col-lg-5'>
                    <div class='data-column'>
                        <a href='data/fake_users2.json'>data 1</a>, 
                        <a href='data/fake_users3.json'>data 2</a>
                    </div>

<pre><code class='javascript'>d3.json('data/fake_users2.json', function(data) {
    for (var i = 0; i < data.length; i++) {
        data[i] = MG.convert.date(data[i], 'date');
    }

    MG.data_graphic({
        title:"Multi-Line Linked",
        description: "Demoing linked multi-line charts.",
        data: data,
        width: 600,
        height: 200,
        right: 40,
        target: '#linked_multi1',
        linked: true
    });
})

d3.json('data/fake_users3.json', function(data) {
    for (var i = 0; i < data.length; i++) {
        data[i] = MG.convert.date(data[i], 'date');
    }

    MG.data_graphic({
        title:"Multi-Line Linked 2",
        description: "Demoing linked multi-line charts.",
        data: data,
        width: 600,
        height: 200,
        right: 40,
        target: '#linked_multi2',
        linked: true
    });
});</code></pre>

                </div>
            </div>

            <a name='data-section'></a>
            <div class='row trunk-section'>
                <div class='col-lg-7 text-center'>
                    <div class='row'>
                        <div class='col-lg-12 text-center' id='missing-y'></div>
                    </div>
                </div>
                <div class='col-lg-5'>
                    <div class='data-column'>
                        <a href='data/missing-y.json'>data</a>
                    </div>

<pre><code class='javascript'>d3.json('data/missing-y.json', function(data) {
    data = MG.convert.date(data, 'date');
    MG.data_graphic({
        title: "Few Observations",
        description: "We sometimes have only a few observations. By setting <i>missing_is_zero: true</i>, missing values for a time-series will be interpreted as zeros. In this example, we've overridden the rollover callback to show 'no data' for missing observations and have set the <i>min_x</i> and <i>max_x</i> options in order to expand the date range.",
        data: data,
        interpolate: 'basic',
        missing_is_zero: true,
        width: 600,
        height: 200,
        right: torso.right,
        min_x: new Date('2014-01-01'),
        max_x: new Date('2014-06-01'),
        target: '#missing-y',
        mouseover: function(d, i) {
            var df = d3.time.format('%b %d, %Y');
            var date = df(d.date);
            var y_val = (d.value === 0) ? 'no data' : d.value;

            d3.select('#missing-y svg .mg-active-datapoint')
                .text(date +  '   ' + y_val);
        }
    });
});</code></pre>

                </div>
            </div>
            
            <div class='row trunk-section'>
                <div class='col-lg-7 text-center'>
                    <div class='row'>
                        <div class='col-lg-12 text-center' id='glorious_chart'></div>
                    </div>
                </div>
                <div class='col-lg-5'>
                
<pre><code class='javascript'>MG.data_graphic({
    title: "Glorious Graphic",
    error: 'This data is blocked by Lorem Ipsum. Get your **** together, Ipsum.',
    chart_type: 'missing-data',
    missing_text: 'This is an example of a missing chart',
    description: "This is an example of a graphic whose data is currently missing. We've also set the <i>error</i> option, which appends an error icon to the title and logs an error to the browser's console.",
    target: '#glorious_chart',
    width: 600,
    height: 200
});</code></pre>

                </div>
            </div>

            <div class='row trunk-section'>
                <div class='col-lg-7 text-center'>
                    <div class='row'>
                        <div class='col-lg-12 text-center' id='missing1'></div>
                    </div>
                </div>
                <div class='col-lg-5'>
                    <div class='data-column'>
                        <a href='data/fake_users2.json'>data</a>
                    </div>
                
<pre><code class='javascript'>d3.json('data/fake_users2.json', function(data) {
    for (var i = 0; i < data.length; i++) {
        data[i] = MG.convert.date(data[i], 'date');
    }

    var all_the_data = MG.clone(data[0]);
    for (i = 1; i < data.length; i++){
        for (var j=0; j < data[i].length; j++){
            if (i === 2 && all_the_data[j].date < new Date('2014-02-01')) {
            } else {
                all_the_data[j]['value' + (i + 1)] = data[i][j].value;
            }
        }
    }

    MG.data_graphic({
        title: "Handling Different Sized Lines in a Single Array",
        description: "How do you handle data with multiple implied time series lengths?",
        data: all_the_data,
        width: 600,
        height: 200,
        right: 40,
        target: '#missing1',
        linked: true,
        y_extended_ticks: true,
        x_accessor: 'date',
        y_accessor: ['value', 'value2', 'value3']
    });
});</code></pre>

                </div>
            </div>

            <a name='axes-section'></a>
            <div class='row trunk-section'>
                <div class='col-lg-7 text-center' id='xnotdate'></div>
                <div class='col-lg-5'>
                    <div class='data-column'><a href='data/xnotdate.json'>data</a></div>

<pre><code class='javascript'>d3.json('data/xnotdate.json', function(data) {
    MG.data_graphic({
        title: "Axis Labels",
        description: "A graphic where we're not plotting dates on the x-axis and where the axes include labels and the line animates on load.",
        data: data,
        animate_on_load: true,
        area: false,
        width: 600,
        height: 200,
        right: 40,
        left: 80,
        bottom: 50,
        target: '#xnotdate',
        x_accessor: 'males',
        y_accessor: 'females',
        x_label: 'males',
        y_label: 'females',
    });
});</code></pre>

                </div>
            </div>

            <div class='row trunk-section'>
                <div class='col-lg-7 text-center' id='percentage'></div>
                <div class='col-lg-5'>
                    <div class='data-column'><a href='data/some_percentage.json'>data</a></div>

<pre><code class='javascript'>d3.json('data/some_percentage.json', function(data) {
    for (var i = 0; i < data.length; i++) {
        data[i] = MG.convert.date(data[i], 'date');
    }

    MG.data_graphic({
        title: "Some Percentages",
        description: "Here is an example that shows percentages.",
        data: data,
        width: 600,
        height: 200,
        right: 40,
        format: 'percentage',
        target: '#percentage'
    });
});</code></pre>

                </div>
            </div>

            <div class='row trunk-section'>
                <div class='col-lg-7 text-center' id='currency'></div>
                <div class='col-lg-5'>
                    <div class='data-column'><a href='data/some_currency.json'>data</a></div>

<pre><code class='javascript'>d3.json('data/some_currency.json', function(data) {
    data = MG.convert.date(data, 'date');
    MG.data_graphic({
        title: "Some Currency",
        description: "Here is an example that uses custom units for currency.",
        data: data,
        width: 600,
        height: 200,
        right: 40,
        target: '#currency',
        yax_units: '$'
    });
});</code></pre>

                </div>
            </div>

            <div class='row trunk-section'>
                <div class='col-lg-7 text-center' id='log1'></div>
                <div class='col-lg-5'>
                    <div class='data-column'><a href='data/log.json'>data</a></div>

<pre><code class='javascript'>d3.json('data/log.json', function(data){
    data = [data];
    for (var i = 0; i < data.length; i++) {
        data[i] = MG.convert.date(data[i], 'date');
    }

    MG.data_graphic({
        title: "Log Scale",
        description: "You can change the y-axis' scale to logarithmic by setting <i>y_scale_type</i> to <i>log</i>.",
        data: data,
        y_scale_type:'log',
        width: 600,
        height: 200,
        right: 40,
        target: '#log1'
    });
});</code></pre>

                </div>
            </div>

            <div class='row trunk-section'>
                <div class='col-lg-7 text-center'>
                    <div class='col-lg-12 text-center' id='hidden1'></div>
                    <div class='col-lg-12 text-center' id='hidden2'></div>
                </div>
                <div class='col-lg-5'>
                    <div class='data-column'>
                        <a href='data/fake_users1.json'>data 1</a>, 
                        <a href='data/brief-1.json'>data 2</a>
                    </div>

<pre><code class='javascript'>d3.json('data/fake_users1.json', function(data) {
    data = MG.convert.date(data, 'date');
    MG.data_graphic({
        title: "No X Axis",
        description: "You can hide either axis by setting <i>x_axis</i> or <i>y_axis</i> to false.",
        data: data,
        decimals: 0,
        width: 600,
        height: 200,
        right: 40,
        xax_count: 4,
        target: '#hidden1',
        area: false,
        x_axis: false,
        small_text: true
    });
});

d3.json('data/brief-1.json', function(data) {
    data = MG.convert.date(data, 'date');
    MG.data_graphic({
        title: "No Y Axis",
        description: "You can hide either axis by setting <i>x_axis</i> or <i>y_axis</i> to false.",
        data: data,
        decimals: 0,
        width: 600,
        height: 200,
        right: 20,
        xax_count: 4,
        target: '#hidden2',
        area: false,
        small_text: true,
        y_axis: false
    });
});</code></pre>

                </div>
            </div>
            
            <div class='row trunk-section'>
                <div class='col-lg-7 text-center' id='y_rug'></div>
                <div class='col-lg-5'>
                    <div class='data-column'><a href='data/fake_users1.json'>data</a></div>

<pre><code class='javascript'>d3.json('data/fake_users1.json', function(data) {
    data = MG.convert.date(data, 'date');
    MG.data_graphic({
        title: "No X Axis",
        description: "You can set rug plots either axis by setting <i>x_rug</i> or <i>y_rug</i> to true.",
        data: data,
        decimals: 0,
        width: 600,
        height: 200,
        right: 40,
        target: '#y_rug',
        area: false,
        y_rug: true
    });
});</code></pre>

                </div>
            </div>

            <div class='row trunk-section'>
                <div class='col-lg-7 text-center'>
                    <div class='col-lg-6 text-center' id='neg1'></div>
                    <div class='col-lg-6 text-center' id='neg2'></div>
                    <div class='col-lg-6 text-center' id='y-axis-not-zero'></div>
                </div>
                <div class='col-lg-5'>
                    <div class='data-column'>
                        <a href='data/neg1.json'>data 1</a>, 
                        <a href='data/neg2.json'>data 2</a>
                    </div>

<pre><code class='javascript'>d3.json('data/neg1.json', function(data) {
    data = MG.convert.date(data, 'date');
    MG.data_graphic({
        title: "Negative Values 1",
        description: "MG defaults to 0 on the y-axis as min if there are no negative numbers. If there are negatives, should provide some buffer below.",
        data: data,
        width: 295,
        height: 150,
        right: 10,
        target: '#neg1'
    });

    var data2 = MG.clone(data).map(function(d) {
        d.value = d.value + 550;
        return d;
    });

    MG.data_graphic({
        title: "Y-Axis Not Zero",
        data: data2,
        width: 295,
        height: 150,
        right: 10,
        min_y_from_data: true,
        yax_units: '$',
        target: '#y-axis-not-zero',
        x_accessor: 'date',
        y_accessor: 'value'
    });
});

d3.json('data/neg2.json', function(data) {
    MG.data_graphic({
        title: "Negative Values 2",
        data: data,
        width: 295,
        height: 150,
        right: 10,
        xax_format: function(f) {
            var pf = d3.formatPrefix(f);
            return Math.round(pf.scale(f)) + pf.symbol;
        },
        target: '#neg2',
        x_accessor: 'subject',
        y_accessor: 'measure'
    });
});</code></pre>




                </div>
            </div>

            <a name='rollovers-section'></a>
            <div class='row trunk-section'>
                <div class='col-lg-7 text-center'>
                    <div class='col-lg-12 text-center' id='precision1'></div>
                    <div class='col-lg-12 text-center' id='precision2'></div>
                    <div class='col-lg-12 text-center' id='custom-rollover'></div>
                    <div class='col-lg-12 text-center' id='no-rollover-text'></div>
                </div>
                <div class='col-lg-5'>
                    <div class='data-column'>
                        <a href='data/float.json'>data 1</a>, 
                        <a href='data/some_percentage.json'>data 2</a>
                    </div>

<pre><code class='javascript'>d3.json('data/float.json', function(data) {
    data = MG.convert.date(data, 'date');

    MG.data_graphic({
        title: "Changing Precision 1",
        description: "We can change the precision if the axis data type is a float. We can also change both the formatting, or hide the rollover text altogether. Here we set <i>decimals: 3</i> to get three decimals in the rollover for percentages.",
        data: data,
        decimals: 3,
        width: 600,
        height: 200,
        right: 40,
        xax_count: 4,
        target: '#precision1'
    });

    MG.data_graphic({
        title: "Custom Rollover Text",
        description: "Here is an example of changing the rollover text. You could in theory actually update any DOM element with the data from that rollover - a title, for instance.",
        data: data,
        width: 600,
        height: 200,
        right: 40,
        xax_count: 4,
        mouseover: function(d, i) {
            // custom format the rollover text, show days
            var prefix = d3.formatPrefix(d.value);
            d3.select('#custom-rollover svg .mg-active-datapoint')
                .text('Day ' + (i + 1) + '   ' + prefix.scale(d.value).toFixed(2) + prefix.symbol);
        },
        target: '#custom-rollover'
    });
});

d3.json('data/some_percentage.json', function(data) {
    for (var i = 0; i < data.length; i++) {
        data[i] = MG.convert.date(data[i], 'date');
    }

    MG.data_graphic({
        title: "Changing Precision 2",
        description: "Here we set <i>decimals: 0</i> for percentages.",
        data: data,
        decimals: 0,
        format: 'percentage',
        width: 600,
        height: 200,
        right: 40,
        xax_count: 4,
        target: '#precision2'
    });

    MG.data_graphic({
        title: "... Or No Rollover Text",
        description: "By setting <i>show_rollover_text: false</i>, you can hide the default rollover text from even appearing. This, coupled with the custom callback, gives a lot of interesting options for controlling rollovers.",
        data: data,
        decimals: 0,
        show_rollover_text: false,
        format: 'Percentage',
        width: trunk.width,
        height: trunk.height,
        right: trunk.right,
        xax_count: 4,
        target: '#no-rollover-text'
    });
});</code></pre>

                </div>
            </div>
            
            <div class='row trunk-section'>
                <div class='col-lg-7 text-center' id='aggregate'></div>
                <div class='col-lg-5'>
                    <div class='data-column'><a href='data/fake_users2.json'>data</a></div>

<pre><code class='javascript'>d3.json('data/fake_users2.json', function(data) {
    for (var i = 0; i < data.length; i++) {
        data[i] = MG.convert.date(data[i], 'date');
    }

    var all_the_data = MG.clone(data[0]);
    for (i = 1; i < data.length; i++){
        for (var j=0; j < data[i].length; j++){
            if (i === 2 && all_the_data[j].date < new Date('2014-02-01')) {
            } else {
                all_the_data[j]['value' + (i + 1)] = data[i][j].value;
            }
        }
    }

    MG.data_graphic({
        title: "Aggregated Rollover Information",
        description: "Aggregated information can be displayed with the <i>aggregate_rollover</i> option in order to clearly highlight the relationship between lines. Also handles non-contiguous data",
        data: all_the_data,
        width: 600,
        height: 200,
        right: 40,
        target: '#aggregate',
        y_extended_ticks: true,
        x_accessor: 'date',
        y_accessor: ['value', 'value2', 'value3'],
        aggregate_rollover: true
    });
});</code></pre>

                </div>
            </div>

            <a name='auto-time-formatting-section'></a>
            <div class='row trunk-section'>
                <div class='col-lg-7 text-center'>
                    <div class='row'>
                        <div class='col-lg-12 text-center' id='time1'></div>
                        <div class='col-lg-12 text-center' id='time2'></div>
                        <div class='col-lg-12 text-center' id='time3'></div>
                        <div class='col-lg-12 text-center' id='time4'></div>
                    </div>
                </div>
                <div class='col-lg-5'>
                
                <pre><code class='javascript'>function fake_data(length, seconds) {
    var d = new Date();
    var v = 100000;
    var data=[];

    for (var i = 0; i < length; i++){
        v += (Math.random() - 0.5) * 10000;
        data.push({date: MG.clone(d), value: v});
        d = new Date(d.getTime() + seconds * 1000);
    }
    return data;
}

function fake_days(length) {
    var d = new Date();
    var v = 100000;

    var data = [];
    for (var i = 0; i < length; i++) {
        v += (Math.random() - 0.5) * 10000;
        data.push({date: MG.clone(d), value: v});
        d.setDate(d.getDate() + 1);
    }
    return data;
}

var data1 = fake_data(25, 1);
var data2 = fake_data(25,60 * 20);
var data3 = fake_data(75,60 * 60);
var data4 = fake_days(25);

MG.data_graphic({
    data: data1,
    target: '#time1',
    title: 'Less Than A Minute',
    width: 600,
    height: 200,
    right: 40
});

MG.data_graphic({
    data: data2,
    target: '#time2',
    title: 'Less Than A Day',
    width: 600,
    height: 200,
    right: 40
});

MG.data_graphic({
    data: data3,
    target: '#time3',
    title: 'A Few Days',
    width: 600,
    height: 200,
    right: 40
});

MG.data_graphic({
    data: data4,
    target: '#time4',
    title: 'Over A Large Span of Days',
    width: 600,
    height: 200,
    right: 40
});</code></pre>

                </div>
            </div>
            
            <a name='annotations-section'></a>
            <div class='row trunk-section'>
                <div class='col-lg-7 text-center' id='markers'></div>
                <div class='col-lg-5'>
                    <div class='data-column'><a href='data/some_percentage.json'>data</a></div>

<pre><code class='javascript'>d3.json('data/some_percentage.json', function(data) {
    for (var i = 0; i < data.length; i++) {
        data[i] = MG.convert.date(data[i], 'date');
    }

    var markers = [{
        'date': new Date('2014-02-01T00:00:00.000Z'),
        'label': '1st Milestone'
    }, {
        'date': new Date('2014-03-15T00:00:00.000Z'),
        'label': '2nd Milestone'
    }];

    MG.data_graphic({
        title: "Markers",
        description: "Markers are vertical lines that can be added at arbitrary points.",
        data: data,
        width: 600,
        height: 200,
        right: 40,
        markers: markers,
        format: 'percentage',
        target: '#markers'
    });
});</code></pre>

                </div>
            </div>
            
            <div class='row trunk-section'>
                <div class='col-lg-7 text-center' id='baselines'></div>
                <div class='col-lg-5'>
                    <div class='data-column'><a href='data/fake_users1.json'>data</a></div>

<pre><code class='javascript'>d3.json('data/fake_users1.json', function(data) {
    data = MG.convert.date(data, 'date');
    MG.data_graphic({
        title: "Baselines",
        description: "Baselines are horizontal lines that can added at arbitrary points.",
        data: data,
        baselines: [{value: 160000000, label: 'a baseline'}],
        width: 600,
        height: 200,
        right: 40,
        target: '#baselines'
    });
});</code></pre>

                </div>
            </div>

            <div class='row trunk-section'>
                <div class='col-lg-7 text-center mg-main-area-solid' id='spike'></div>
                <div class='col-lg-5'>
                    <div class='data-column'><a href='data/fake_users1.json'>data</a></div>

<pre><code class='javascript'>d3.json('data/fake_users1.json', function(data) {
        data = MG.convert.date(data, 'date');

        var markers = [{
            'date': new Date('2014-03-17T00:00:00.000Z'),
            'label': 'Look, a spike!'
        }];

        MG.data_graphic({
            title: "Annotating a Point",
            description: "By setting the graphic's target a class name of main-area-solid, markers don't extend down to the bottom of the graphic, which better draws attention to, say, spikes.",
            data: data,
            width: torso.width,
            height: torso.height,
            right: torso.right,
            markers: markers,
            target: '#spike'
        });
});</code></pre>

                </div>
            </div>

            <a name='updating-section'></a>
            <div class='row trunk-section'>
                <div class='col-lg-7 text-center'>
                    <div class='col-lg-12' id='split_by'></div>
                    <div class='btn-group btn-group-sm text-center split-by-controls'>
                        <button type='button' class='btn btn-default active'
                            data-y_accessor='release'>Release</button>
                        <button type='button' class='btn btn-default'
                            data-y_accessor='beta'>Beta</button>
                        <button type='button' class='btn btn-default'
                            data-y_accessor='alpha'>Alpha</button>
                    </div>
                    <div class='col-lg-12' id='modify_time_period'></div>
                    <div class='btn-group btn-group-sm text-center
                        modify-time-period-controls'>
                        <button type='button' class='btn btn-default active'
                            data-time_period=''>All time</button>
                        <button type='button' class='btn btn-default'
                            data-time_period='61'>Past 2 months</button>
                        <button type='button' class='btn btn-default'
                            data-time_period='31'>Past month</button>
                    </div>
                </div>
                <div class='col-lg-5'>
                    <div class='data-column'><a href='data/split_by.json'>data</a></div>

<pre><code class='javascript'>var split_by_data;
d3.json('data/split_by.json', function(data) {
    data = MG.convert.date(data, 'date');

    split_by_data = MG.data_graphic({
        title: "Downloads by Channel",
        description: "We sometimes have the need to split the data and then gracefully update the graphic with the newly selected subset of data.",
        data: data,
        width: 600,
        height: 200,
        right: 40,
        xax_count: 4,
        target: '#split_by',
        x_accessor: 'date',
        y_accessor: 'release'
    });

    MG.data_graphic({
        title: "Beta Downloads",
        description: "We sometimes have the need to view data for just the past n days. Here, the <i>transition_on_update</i> option is set to false.",
        data: data,
        width: 600,
        height: 200,
        right: 40,
        show_secondary_x_label: false,
        xax_count: 4,
        target: '#modify_time_period',
        x_accessor: 'date',
        y_accessor: 'beta'
    });
});</code></pre>

                </div>
            </div>

            <a name='other-section'></a>
            <div class='row trunk-section'>
                <div class='col-lg-7 text-center' id='aspect1'></div>
                <div class='col-lg-5'>
                    <div class='data-column'><a href='data/fake_users3.json'>data</a></div>

<pre><code class='javascript'>d3.json('data/fake_users3.json', function(data) {
    for(var i = 0; i < data.length; i++) {
        data[i] = MG.convert.date(data[i], 'date');
    }

    MG.data_graphic({
        title: "Preserving the aspect ratio",
        description: "You can automatically set the width or height of a data graphic to fit its parent element. When done the graphic will rescale to fit the size of the parent element while preserving its aspect ratio.",
        data: data,
        full_width: true,
        height: 300,
        right: 40,
        x_extended_ticks: true,
        target: '#aspect1',
        x_accessor: 'date',
        y_accessor: 'value'
    });
});</code></pre>

                </div>
            </div>

            <div class='row trunk-section'>
                <div class='col-lg-7 text-center'>
                    <div class='col-lg-6' id='small1'></div>
                    <div class='col-lg-6' id='small2'></div>
                </div>
                <div class='col-lg-5'>
                    <div class='data-column'><a href='data/fake_users3.json'>data</a></div>

<pre><code class='javascript'>d3.json('data/brief-1.json', function(data) {
    data = MG.convert.date(data, 'date');

    
    MG.data_graphic({
        title: "Small Text Inferred By Size",
        description: "If <i>args.width - args.left - args.right</i> is smaller than <i>args.small_width_threshold</i>, and the similarly for the height, the text size automatically scales so that it is slightly smaller.",
        data: data,
        width: 240,
        height: 140,
        right: 20,
        top: 20,
        xax_count: 4,
        target: '#small1'
    });
});

d3.json('data/brief-2.json', function(data) {
    data = MG.convert.date(data, 'date');

    MG.data_graphic({
        title: "Small Text",
        description: "By adding <i>small_text</i> to true, we can force the use of smaller axis text regardless of the width or height.",
        data: data,
        width: 295,
        height: 150,
        right: 10,
        small_text: true,
        xax_count: 4,
        target: '#small2'
    });
});</code></pre>

                </div>
            </div>

            <a name='experimental-section'></a>
            <div class='row trunk-section'>
                <div class='col-lg-7 text-center'>
                    <div class='col-lg-6 text-center' id='scatter-simple'></div>
                    <div class='col-lg-6 text-center' id='categorical1'></div>
                    <div class='col-lg-6 text-center' id='categorical2'></div>
                    <div class='col-lg-6 text-center' id='scatter-line-best-fit'></div>
                    <div class='col-lg-6 text-center' id='scatter-size-and-color'></div>
                    <div class='col-lg-6 text-center' id='sls-time-series'></div>
                </div>
                <div class='col-lg-5'>
                    <div class='data-column'><a href='data/point1.json'>data</a></div>

<pre><code class='javascript'>d3.json('data/points1.json', function(data) {
    MG.data_graphic({
        title: "Simple Scatterplot",
        description: "This is an example of a simple scatterplot, in which we have enabled rug plots on the y-axis by setting the <i>y_rug</i> option to true.",
        data: data,
        chart_type: 'point',
        width: trunk.width,
        height: trunk.height * 1.5,
        right: trunk.right,
        target: '#scatter-simple',
        xax_format: function(f) {
            var pf = d3.formatPrefix(f);
            return Math.round(pf.scale(f)) + pf.symbol;
        },
        x_accessor: 'x',
        y_accessor: 'y',
        mouseover: function(d, i) { console.log(d,i); },
        y_rug: true
    });

    MG.data_graphic({
        title: "Automatic Category Coloring",
        description: "By setting <i>color_type</i> to 'category' you can color the points according to another discrete value.",
        data: data,
        chart_type: 'point',
        width: trunk.width,
        height: trunk.height * 1.5,
        right: trunk.right,
        target: '#categorical1',
        xax_format: function(f) {
            var pf = d3.formatPrefix(f);
            return Math.round(pf.scale(f)) + pf.symbol;
        },
        x_accessor: 'x',
        y_accessor: 'y',
        color_accessor:'v',
        color_type:'category',
        y_rug: true
    });

    MG.data_graphic({
        title: "Custom Category Color Mapping",
        description: "You can specify the color domain and the corresponding color range to get custom mapping of categories to colors.",
        data: data,
        chart_type: 'point',
        width: trunk.width,
        height: trunk.height * 1.5,
        right: trunk.right,
        target: '#categorical2',
        xax_format: function(f) {
            var pf = d3.formatPrefix(f);
            return Math.round(pf.scale(f)) + pf.symbol;
        },
        x_accessor: 'x',
        y_accessor: 'y',
        color_accessor:'v',
        color_domain:['cat_0', 'cat_1', 'other'],
        color_range:['blue', 'gray', 'black'],
        color_type:'category',
        x_rug: true
    });

    MG.data_graphic({
        title: "Simple Line of Best Fit",
        description: "For any scatterplot, set <i>least_squares</i> to true to add.",
        data: data,
        least_squares: true,
        chart_type: 'point',
        width: trunk.width,
        height: trunk.height * 1.5,
        right: trunk.right,
        target: '#scatter-line-best-fit',
        xax_format: function(f) {
            var pf = d3.formatPrefix(f);
            return Math.round(pf.scale(f)) + pf.symbol;
        },
        x_accessor: 'x',
        y_accessor: 'y'
    });
});

d3.json('data/fake_users1.json', function(data) {
        data = MG.convert.date(data, 'date');
        MG.data_graphic({
            title: "Another Least Squares Example",
            description: "Least squares effortlessly works with dates or times on axes.",
            data: data,
            chart_type: 'point',
            width: trunk.width,
            height: trunk.height * 1.5,
            left: 60,
            right: trunk.right,
            least_squares: true,
            target: '#sls-time-series',
            x_accessor: 'date',
            y_accessor: 'value'
        });
});

var color_range = (theme === 'light') ? null : ['white','yellow'];

d3.json('data/points1.json', function(data) {
    MG.data_graphic({
        title: "Scatterplot with Size and Color",
        description: "Scatterplots have <i>x_accessor</i>, <i>y_accessor</i>, <i>size_accessor</i>, and <i>color_accessor</i>. For the last two you can also provide domain and range functions, to make it easy to change the color ranges. Colors default to red and blue, but can be overridden by passing an array of colors to <i>color_range</i>, as we've done in this example for the dark theme.",
        data: data,
        chart_type: 'point',
        width: trunk.width,
        height: trunk.height * 1.5,
        right: trunk.right,
        target: '#scatter-size-and-color',
        xax_format: function(f) {
            var pf = d3.formatPrefix(f);
            return Math.round(pf.scale(f)) + pf.symbol;
        },
        x_accessor: 'x',
        y_accessor: 'y',
        color_accessor:'z',
        color_range: color_range,
        size_accessor:'w',
        x_rug: true,
        y_rug: true
    });</code></pre>

                </div>
            </div>
            
            <div class='row trunk-section'>
                <div class='col-lg-7 text-center'>
                    <div class='col-lg-6 text-center' id='histogram1'></div>
                    <div class='col-lg-6 text-center' id='histogram2'></div>
                    <div class='col-lg-6 text-center' id='histogram3'></div>
                    <div class='col-lg-6 text-center' id='histogram4'></div>
                    <div class='col-lg-12 text-center' id='time-hist'></div>
                    <div class='col-lg-12 text-center' id='ufos'></div>
                </div>
                <div class='col-lg-5'>
                    <div class='data-column'><a href='data/ufo_dates.csv'>data</a></div>

<pre><code class='javascript'>var values = d3.range(10000).map(d3.random.bates(10));

MG.data_graphic({
    title: "Histogram 1",
    description: "Raw data values being fed in. Here, we specify the number of bins to be 50 and have bar margins set to 0. The histogram graphic type includes the ability to <a href='http://en.wikipedia.org/wiki/Freedman%E2%80%93Diaconis_rule'>bin data</a>.",
    data: values,
    chart_type: 'histogram',
    width: 295,
    height: 150,
    right: 10,
    bins: 50,
    bar_margin: 0,
    target: '#histogram1',
    y_extended_ticks: true,
    mouseover: function(d, i) {
        d3.select('#histogram1 svg .mg-active-datapoint')
            .text('Value: ' + d3.round(d.x,2) +  '   Count: ' + d.y);
    }
});

d3.csv('data/ufo_dates.csv', function(ufos){
    var data = ufos.map(function(d){
        return parseInt(d.value) / 30;
    });
    data.sort();
    var p75 = data[Math.floor(data.length * 3 / 4)];
    MG.data_graphic({
        title: "Difference in UFO Sighting and Reporting Dates (in months)",
        description: "Semi-real data about the reported differences between the supposed sighting of a UFO, and the date it was reported. I inflated the low values and inflated the high ones to make the histogram a little more pleasing for the demo. The data set comes from some random UFO sightings csv I had on my computer.",
        data: data,
        markers:[{'label': '75% of reports come <' + d3.round(p75 / 12) + ' years after the initial sighting', 'value': p75}],
        chart_type: 'histogram',
        width: 600,
        height: 300,
        right: 40,
        bar_margin: 0,
        bins: 150,
        target: '#ufos',
        y_extended_ticks: true,
        mouseover: function(d, i) {
            var string;
            if (d.x < 12) {
                string = d3.round(d.x,2) + ' Months';
            } else {
                string = d3.round(d.x,2) + ' Months';
            }
            d3.select('#ufos svg .mg-active-datapoint')
                .text(string + '       Volume: ' + d.y);
        }
    });
});

var second = d3.range(10000).map(function(d) { return Math.random() * 10; });
second = d3.layout.histogram()(second)
    .map(function(d) {
        return {'count': d.y, 'value': d.x};
});

MG.data_graphic({
    title: "Histogram 2",
    description: "Already binned data being fed in.",
    data: second,
    binned: true,
    chart_type: 'histogram',
    width: 295,
    height: 150,
    right: 10,
    target: '#histogram2',
    y_extended_ticks: true,
    x_accessor:'value',
    y_accessor:'count',
    mouseover: function(d, i) {
        d3.select('#histogram2 svg .mg-active-datapoint')
            .text('Value: ' + d3.round(d.x,2) +  '   Count: ' + d.y);
    }
});

var third = d3.range(1000).map(d3.random.bates(10));
third = third.map(function(d,i){ return {val1: d, val2: i}; });

MG.data_graphic({
    title: "Histogram 3",
    description: "Unbinned, but in same format as other line chart data.",
    data: third,
    chart_type: 'histogram',
    width: 295,
    height: 150,
    right: 10,
    target: '#histogram3',
    linked: true,
    y_extended_ticks: true,
    x_accessor:'val1',
    mouseover: function(d, i) {
        d3.select('#histogram3 svg .mg-active-datapoint')
            .text('Value: ' + d3.round(d.x,2) +  '   Count: ' + d.y);
    }
});

// check for negative values, for sanity.
var fourth = d3.range(1000).map(d3.random.bates(10));
fourth = fourth.map(function(d,i){ return d - 0.5; });

MG.data_graphic({
    title: "Histogram 4",
    description: "Sanity-checking negative data.",
    data: fourth,
    chart_type: 'histogram',
    width: 295,
    height: 150,
    right: 10,
    target: '#histogram4',
    y_extended_ticks: true,
    x_accessor:'val1',
    mouseover: function(d, i) {
        d3.select('#histogram4 svg .mg-active-datapoint')
            .text('Value: ' + d3.round(d.x,2) +  '   Count: ' + d.y);
    }
});

var hist1 = fake_data(25, 60).map(function(d){
    d.value = Math.round(d.value);
    return d;
});

MG.data_graphic({
    data: hist1,
    target: '#time-hist',
    title: 'Histograms can be time series as well',
    chart_type: 'histogram',
    width: 600,
    height: 200,
    binned: true,
});</code></pre>

                </div>
            </div>

            <div class='row trunk-section'>
                <div class='col-lg-7 text-center'>
                    <div class='col-lg-12 text-center' id='bar1'></div>
                    <div class='col-lg-6 text-center' id='bar2'></div>
                    <div class='col-lg-6 text-center' id='bar3'></div>
                </div>
                <div class='col-lg-5'>

<pre><code class='javascript'>var bar_data = [
    {'label': 'first', 'value':4, 'baseline':4.2, 'prediction': 2},
    {'label': 'second', 'value':2.1, 'baseline':3.1, 'prediction': 3},
    {'label': 'third', 'value':6.3, 'baseline':6.3, 'prediction': 4},
    {'label': 'fourth', 'value':5.7, 'baseline':3.2, 'prediction': 5},
    {'label': 'fifth', 'value':5, 'baseline':4.2, 'prediction': 3},
    {'label': 'sixth', 'value':4.2, 'baseline':10.2, 'prediction': 3},
    {'label': 'yet another', 'value':4.2, 'baseline':10.2, 'prediction': 3},
    {'label': 'and again', 'value':4.2, 'baseline':10.2, 'prediction': 3},
    {'label': 'and sss', 'value':4.2, 'baseline':10.2, 'prediction': 3}
];

MG.data_graphic({
    title: 'Bar Prototype',
    description: 'Work-in-progress',
    data: bar_data,
    chart_type: 'bar',
    x_accessor: 'value',
    y_accessor: 'label',
    baseline_accessor: 'baseline',
    predictor_accessor: 'prediction',
    width: trunk.width,
    right: trunk.right,
    target: '#bar1',
    animate_on_load: true,
    x_axis: false
});

MG.data_graphic({
    title: 'No Axis',
    description: 'Work-in-progress',
    data: bar_data,
    chart_type: 'bar',
    baseline_accessor: 'baseline',
    predictor_accessor: 'prediction',
    x_accessor: 'value',
    y_accessor: 'label',
    width: trunk.width,
    height: trunk.height,
    right: trunk.right,
    animate_on_load: true,
    target: '#bar2'
});

MG.data_graphic({
    title: 'Vertical Bars',
    description: 'Work-in-progress',
    data: bar_data,
    chart_type: 'bar',
    bar_orientation: 'vertical',
    y_accessor: 'value',
    x_accessor: 'label',
    baseline_accessor: 'baseline',
    predictor_accessor: 'prediction',
    width: trunk.width,
    height: trunk.height,
    right: trunk.right,
    animate_on_load: true,
    target: '#bar3'
});</code></pre>

                </div>
            </div>

            <div class='row trunk-section'>
                <div class='col-lg-7 text-center' id='table1'></div>
                <div class='col-lg-5'>

<pre><code class='javascript'>var table_data = [
    { 'year': 1852, 'value1': 10.2, 'value2': 1030004.43423,'share': 0.12, 'total': 34003400, 'temp': 43, 'geo': 'United Kingdom', 'description': "Having a way of describing a row can be useful." },
    { 'year': 1901, 'value1': 10.1, 'value2': 54003.223, 'share': 0.11, 'total': 4302100, 'temp': 55, 'geo': 'United States', 'description': "More made-up numbers." },
    { 'year': 1732, 'value1': 4.3, 'value2': 1004.91422,   'share': 0.14, 'total': 4300240, 'temp': 42, 'geo': 'France', 'description': "We didn't specify a title for this column." },
    { 'year': 1945, 'value1': 2.9, 'value2': 2430.121,  'share': 0.23, 'total': 24000000, 'temp': 54, 'geo': 'Brazil', 'description': "Brazil, Brazil." },
    { 'year': 1910, 'value1': 1.0, 'value2': 5432.3,  'share': 0.19, 'total': 130000, 'temp': 52, 'geo': 'India', 'description': "Last description in the whole thing." }
];

var table1 = MG.data_table({
        data: table_data,
        title: 'A Data Table',
        description: 'A table is often the most appropriate way to present data. We aim to make the creation of data tables very simple. We are working on implementing sparklines, bullet charts, and other niceties.',
        show_tooltips: true
    })
    .target('#table1')
    .title({
        accessor: 'geo',
        secondary_accessor:'year',
        label: 'Country',
        description: 'These are arbitrary countries with arbitrary years underneath.'
    })
    .number({ accessor: 'value1', label: 'Size', value_formatter: function(d){ return d + ' yrds'; }})
    .number({ accessor: 'value2', label: 'Score', round: 2,  font_weight: 'bold' })
    .number({ accessor: 'temp', label: 'Temp.', format: 'temperature', width: 100, color: 'gray' })
    .number({
        accessor: 'total',
        label: 'Volume',
        format: 'count', currency: '$',
        width: 100,
        font_weight: function(d){ return d < 5000000 ? 'bold' : 'normal'; },
        color: function(d){ return d < 5000000 ? '#f70101' : 'auto'; }
    })
    .number({ accessor: 'share', label: 'Share', format: 'percentage', width: 100 })
    .text({ accessor: 'description', width: 240, font_style: 'italic' })
    .display();</code></pre>

                </div>
            </div>
            
            <div class='row trunk-section'>
                <div class='col-lg-7 text-center' id='buttons'></div>
                <div class='col-lg-5'>

<pre><code class='javascript'>var bdata = [
    {a:'apples', b:'quartz'},
    {a:'bananas', b:'pyrite'},
    {a:'durian', b:'obsidian'}
];

var resolution_features = ['weekly', 'monthly'];

var buttons = MG.button_layout('#buttons')
    .data(bdata)
    .manual_button('Time Scale', resolution_features, function(){ console.log('switched time scales'); })
    .button('a', 'Fruit')
    .button('b', 'Rock')
    .callback(function(){
        console.log('made it');
        return false;
    })
    .display();</code></pre>

                </div>
            </div>
       </div> <!-- end trunk -->

       <div class='footer'>
            <a href='http://metricsgraphicsjs.org'>MetricsGraphics.js 2.3</a>
            <br />Created by <a href='https://twitter.com/alialmossawi'>Ali Almossawi</a> and
            <a href='https://github.com/hamilton'>Hamilton Ulmer</a>
            <br />2014 &middot; Shared under a <a href='http://www.mozilla.org/MPL/2.0/'>
            Mozilla Public License</a>
            <br /><a href='https://github.com/mozilla/metrics-graphics'>
                <i class='fa fa-github fa-3x' style='line-height:42px'></i>
            </a>
        </div>
    </div> <!-- end container -->
            
    <script src='js/main.js'></script>
</body>
</html>
